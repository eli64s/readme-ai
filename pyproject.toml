[tool.poetry]
name = "readmeai"
version = "0.6.1"
description = "Automated README file generator, powered by AI."
authors = ["Eli Salamie <egsalamie@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/eli64s/readme-ai"
documentation = "https://eli64s.github.io/readme-ai"
keywords = [
    "ai-documentation",
    "ai-powered",
    "ai-readme",
    "automatic-documentation",
    "chat-gpt",
    "cli",
    "code-documentation",
    "developer-tools",
    "documentation-automation",
    "gemini",
    "github-documentation",
    "gpt-4",
    "llm",
    "markdown-generator",
    "openai",
    "project-documentation",
    "readme-ai",
    "readme-automation",
    "readme-generator",
    "software-documentation",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: Pydantic",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Documentation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development",
    "Topic :: Software Development :: Documentation",
    "Topic :: Text Processing :: Markup :: Markdown",
]
include = [
    "readmeai",
    "readmeai.*",
    "readmeai/config/settings/templates/*",
]

[tool.poetry.scripts]
readmeai = "readmeai.cli.main:main"

[tool.poetry.dependencies]
python = "^3.9,<4.0.0"
aiohttp = "^3.9.5"
click = "^8.1.7"
gitpython = "^3.1.31"
openai = "*"
pydantic = "*"
pydantic-extra-types = "*"
pydantic-settings = "*"
pyyaml = "^6.0.1"
structlog = "^24.4.0"
tenacity = "^8.2.2"
tiktoken = "^0.4.0"
tomli = { version = "*", python = "<3.11" }
typing-extensions = { version = "*", python = "<3.11" }

anthropic = { version = "*", optional = true }
google-generativeai = { version = "*", optional = true }

[tool.poetry.extras]
anthropic = ["anthropic"]
google-generativeai = ["google-generativeai"]

[tool.poetry.group.dev.dependencies]
mypy = "*"
nox = "*"
pre-commit = "*"
ruff = "*"
types-pyyaml = "*"
types-toml = "*"

[tool.poetry.group.test.dependencies]
coverage = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-pretty = "*"
pytest-randomly = "*"
pytest-sugar = "*"
pytest-xdist = "*"
pytest-memray = "^1.7.0"
pytest-fastest = "^0.0.12"

[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-git-revision-date-localized-plugin = "*"
mkdocs-material = { version = "*", extras = ["imaging"] }
mkdocs-minify-plugin = "*"
mkdocstrings-python = "*"
mkdocs-redirects = "*"
pymdown-extensions = "*"

[tool.poetry.group.anthropic.dependencies]
anthropic = "*"

[tool.poetry.group.google-generativeai.dependencies]
google-generativeai = "*"

[tool.pytest.ini_options]
addopts = [
    "-vv",
    "-n=auto",
    "--durations=5",
    # "--fastest-mode=skip",
    # "--fastest-commit=main",
    "--cov=readmeai",
    "--cov-append",
    "--cov-branch",
    "--cov-fail-under=80",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=json:tests/.reports/coverage.json",
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
log_cli = true
log_level = "INFO"
testpaths = ["tests"]

[tool.coverage.report]
exclude_also = [
    "if __name__ == '__main__':",
    "pragma: no cover",
    "raise NotImplementedError",
]
omit = [
    "tests/*",
    "**/__init__.py",
    "noxfile.py",
    "../readme-ai/readmeai/retrievers/git/metadata.py",
    "../readme-ai/readmeai/retrievers/git/providers.py",
    "../readme-ai/readmeai/utilities/fetch_badges.py",
    "../readme-ai/readmeai/extractors/tools.py",
]
precision = 2
show_missing = true
skip_empty = true
sort = "cover"

[tool.coverage.run]
data_file = "tests/.reports/.coverage"
parallel = true

[build-system]
requires = ["poetry-core", "setuptools"]
build-backend = "poetry.core.masonry.api"
